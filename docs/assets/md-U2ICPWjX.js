import{o as n,c as s,k as a,e,B as t,s as d,t as u,A as i}from"./modules/vue-FURrN97m.js";import{_ as p}from"./default-CKydmwFh.js";import{u as c,f}from"./slidev/context-CKaQpQVt.js";import"./index-BRSB-Ac2.js";import"./modules/shiki-DUnWAZqI.js";const C={__name:"slides.md__slidev_8",setup(m){const{$slidev:x,$nav:g,$clicksContext:o,$clicks:_,$page:b,$renderContext:y,$frontmatter:r}=c();return o.setup(),(v,l)=>(n(),s(p,d(u(i(f)(i(r),7))),{default:a(()=>l[0]||(l[0]=[e("h3",null,"StatefulWidgetは使用しない",-1),e("p",null,"次に、画面に動的な変化を与えるようにしていきたいです。(例: 画面に表示する数字をボタンを押すことでカウントアップさせるなど)",-1),e("p",null,[e("code",null,"StatelessWidget"),t("はその名の通り"),e("span",{style:{"text-decoration-line":"underline","text-decoration-color":"cyan"}},"状態を持つことができない"),t("ため、これだけでは画面を動的に更新することができません。"),e("br"),t(" そこで用意されているのが"),e("code",null,"StatefulWidget"),t("です。"),e("br"),e("code",null,"StatefulWidget"),t("は"),e("code",null,"StatelessWidget"),t("と違い、継承することで変数を管理して画面を動的に更新できるようになります。")],-1),e("div",{style:{display:"flex"}},[e("div",{style:{width:"60%"}},[e("p",null,[t("しかし、これにはいくつも"),e("span",{style:{color:"red"}},"欠点"),t("があり、参考までに右に記載しておきます。")]),e("p",null,[t("右記のような問題を解決するためにあるのが"),e("span",{style:{"text-decoration-line":"underline","text-decoration-color":"cyan"}},"Riverpod"),t("であり、"),e("br"),t(" 本チュートリアルではRiverpodを使用します。"),e("br"),t(" そのため、"),e("code",null,"StatefulWidget"),t("は存在の紹介をするだけにとどめます。")])]),e("div",{style:{"font-size":"14px","padding-left":"1em",opacity:"0.7",border:"1px solid gray"}},[e("div",null,"欠点例"),e("ul",null,[e("li",null,[t("状態の再利用性が低い"),e("br"),t(" 手動で親子間で変数の授受を行わなければならない")]),e("li",null,[t("状態の永続化が困難"),e("br"),t(" 状態がWidgetと直接紐づいているため永続化しづらい")]),e("li",null,[t("再描画効率の悪さ"),e("br"),t(" setStateによって状態を更新すると、そのWidget全体が再描画される可能性がある")]),e("li",null,[t("可読性の低下"),e("br"),t(" Widget内部にロジックが書かれやすいため、可読性が悪くなりがちである")]),e("li",null,[t("ステートの解放が手動"),e("br"),t(" disposeやinitStateを手動で行って初期化・解放する必要があり非効率")]),e("li",null,[t("テストが難しい"),e("br"),t(" ロジックとUIが絡み合ってしまい、ユニットテストしづらい")])])])],-1)])),_:1},16))}};export{C as default};
