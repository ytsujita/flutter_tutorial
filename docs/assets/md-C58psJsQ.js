import{o as i,c as r,k as d,e,B as l,s as u,t as c,A as n}from"./modules/vue-FURrN97m.js";import{_ as a}from"./default-CKydmwFh.js";import{u as m,f as p}from"./slidev/context-CKaQpQVt.js";import"./index-BRSB-Ac2.js";import"./modules/shiki-DUnWAZqI.js";const v={__name:"slides.md__slidev_74",setup(f){const{$slidev:_,$nav:y,$clicksContext:o,$clicks:b,$page:g,$renderContext:$,$frontmatter:s}=m();return o.setup(),(x,t)=>(i(),r(a,u(c(n(p)(n(s),73))),{default:d(()=>t[0]||(t[0]=[e("h3",null,"具体的な描画の仕組み: パフォーマンスについて考える",-1),e("p",null,"Elementツリーの再構築を抑えるためには、以下のことを行います。",-1),e("ul",null,[e("li",null,[l("そもそもdirtyとしてマークされないようにする"),e("br"),e("span",{style:{"font-size":"0.8em"}},[l("Consumerやクラス分割で"),e("code",null,"ref"),l("の範囲を狭めることで、必要最低限のdirtyマークで済む"),e("br"),l(" selectを使って監視する値を絞り、dirtyマークされる条件を減らす")])]),e("li",null,[l("マークされたときに、比較対象を減らす"),e("br"),e("span",{style:{"font-size":"0.8em"}},"constをつけるとWidgetの比較がそれより下のWidgetでは行われなくなる")]),e("li",null,[l("頻繁な"),e("code",null,"Widget"),l("ツリーの再構築を減らす"),e("br"),e("span",{style:{"font-size":"0.8em"}},[l("ifによる条件分岐でWidgetを構築すると、条件に当てはまるときと当てはまらないときで"),e("code",null,"Element"),l("も再生成される"),e("br"),l(" これを防ぐために"),e("code",null,"Visibility"),l("などを使用してツリー構造の変更を減らす"),e("br"),l(" 非表示な状態がほとんどの場合は、"),e("code",null,"Visibility"),l("を使用するよりも"),e("code",null,"if"),l("を使用して、そもそも"),e("code",null,"Element"),l("を構築しないほうが良いこともある")])]),e("li",null,[e("code",null,"Key"),l("を適切に使用して、"),e("code",null,"Widget"),l("の同一性を明確にする"),e("br"),e("span",{style:{"font-size":"0.8em"}},[e("code",null,"Key"),l("が違えば別の"),e("code",null,"Widget"),l("として扱われて"),e("code",null,"Element"),l("を再構築する必要が出てくるため、基本は"),e("code",null,"Key"),l("をつけない")])])],-1),e("p",null,[e("code",null,"Element"),l("の再構築を抑えるという視点で実装すると、他にも方法があるかもしれません。"),e("br"),l(" より良いパフォーマンスのためには"),e("code",null,"Element"),l("(と"),e("code",null,"RenderObject"),l(")を意識してみると良いでしょう。")],-1)])),_:1},16))}};export{v as default};
